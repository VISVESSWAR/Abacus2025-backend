// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id Int @id @default(autoincrement())
  email String @unique
  abacusId Int @unique @default(autoincrement()) @map("abacusid")
  name String
  mobile String
  year Int
  dept String
  college String
  accomodation Boolean?
  password String
  hostCollege String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  token ForgotPasswordToken?
  events Event[]
  workshops Workshop[]
  workshopPayments WorkshopPayment[]

  @@map("user")
}
model RegistrationToken{
  id Int @id @default(autoincrement())
  email     String @unique
  token     String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}
model ForgotPasswordToken{
  id Int @id @default(autoincrement())
  userId     Int @unique
  token     String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id])
}
model Event{
  id Int @id @default(autoincrement())
  userId Int
  eventId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id])
}
model Workshop{
  id Int @id @default(autoincrement())
  userId Int
  workshopId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id])
}
model Admin{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  verifiedPayments WorkshopPayment[]
}
model WorkshopPayment{
  id Int @id @default(autoincrement())
  userId Int
  workshopId Int
  paymentMobile String
  transactionId String @unique
  screenshot String? @unique
  status Status
  verifiedBy Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id])
  admin Admin? @relation(fields: [verifiedBy], references: [id])
}
enum Status{
  PENDING
  SUCCESS
  FAILURE
}
model Queries{
  id Int @id @default(autoincrement())
  name String
  email String
  title String
  message String
  replied Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
